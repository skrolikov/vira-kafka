package kafka

import (
	"context"
	"time"

	"github.com/segmentio/kafka-go"
	log "github.com/skrolikov/vira-logger"
)

// ProducerConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥—é—Å–µ—Ä–∞ Kafka.
type ProducerConfig struct {
	Brokers      []string
	Topic        string
	BatchTimeout time.Duration
	Async        bool
}

// Producer ‚Äî –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ kafka.Writer.
type Producer struct {
	writer *kafka.Writer
	logger *log.Logger
}

// NewProducer —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ Kafka producer.
func NewProducer(cfg ProducerConfig, logger *log.Logger) *Producer {
	w := &kafka.Writer{
		Addr:         kafka.TCP(cfg.Brokers...),
		Topic:        cfg.Topic,
		Balancer:     &kafka.LeastBytes{},
		RequiredAcks: kafka.RequireOne,
		Async:        cfg.Async,
		BatchTimeout: cfg.BatchTimeout,
	}
	logger.Info("‚úÖ Kafka producer —Å–æ–∑–¥–∞–Ω –¥–ª—è topic: %s", cfg.Topic)

	return &Producer{writer: w, logger: logger}
}

// Send –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Kafka.
func (p *Producer) Send(ctx context.Context, key string, value []byte) error {
	msg := kafka.Message{
		Key:   []byte(key),
		Value: value,
		Time:  time.Now(),
	}
	err := p.writer.WriteMessages(ctx, msg)
	if err != nil {
		p.logger.Error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka: %v", err)
		return err
	}
	p.logger.Debug("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Kafka: key=%s", key)
	return nil
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç writer Kafka.
func (p *Producer) Close() error {
	err := p.writer.Close()
	if err != nil {
		p.logger.Error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Kafka producer: %v", err)
	} else {
		p.logger.Info("üîå Kafka producer –∑–∞–∫—Ä—ã—Ç")
	}
	return err
}
